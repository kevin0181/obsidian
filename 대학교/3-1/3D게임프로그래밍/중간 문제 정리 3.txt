1. 리소스를 쓰기위해 어떤 함수로 초기화하는가
- 뷰 함수 내에서 set을 통해 초기화 한다.

2. 리소스 뷰의 종류는 무엇이 있는가(각각의 리소스 뷰에 대해서 설명하라고 하면 어쩌지...)
- 상수 버퍼 뷰, 렌더 타겟 뷰, 깊이스텐실뷰 등

3. DXGI 관련 장치 초기화
DXGI 팩토리 생성 -> 어댑터/디스플레이 선택 -> 디바이스 생성 -> 커맨드 큐 -> 스왑체인 생성
- 팩토리를 생성하고 팩토리를 사용해서 어뎁터랑 디스플레이를 선택한다. 디스플레이 정보는 어뎁터 공간 안의 output으로 얻어올 수 있다. 그 후에 디바이스를 생성하고 커맨드 큐를 생성한 뒤에 스왑체인을 생성합니다.

4. 리소스에 대해 설명하시오 - 디바이스 89
- 리소스는 셰이더에서 사용하는 모든 데이터를 리소스라고 하고 리소스의 종류로는 크게 텍스처랑 버퍼 이렇게 두 가지가 있고 리소스뷰로만 접근할 수 있음, 다렉에는 커밋, 위치, 예약

5. 피킹 방법 - 기초 107
- 카메라 좌표계 원점에서 z축이 camerax,cameray,1로 가는 벡터를 가지는 피킹광선을 쏴서 가까운 점을 찾는다

6. PlaneNomalize함수에 대해서 설명하시오
- 벡터를 단위벡터로 변환, 벡터의 방향은 그대로지만 크기는 1입니다

7. 커맨드 리스트 멤버함수 10개이상 나열하시오
- reset,close,clearrendertarget,cleardepthstensil,drawindexinstanced,drawinstanced,iasetindexbuffer, iasetvertexbuffer,omsetrendertarget,copyresource

8. 그래픽스 파이프라인과 다렉 렌더링 파이프라인을 나열하세요
- 그래픽스 파이프 라인
입력조립기->정점셰이더->테셀레이터->기하 쉐이더->레스터라이저->픽셀셰이더->출력병합기
- 다렉 렌더링 파이프 라인
입력 조립기 (IA) -> 정점 쉐이더 (VS) -> 헐 쉐이더 (HS) -> 테셀레이터 -> 도메인 쉐이더 (DS) -> 기하 쉐이더 (GS) -> 레스터라이저 -> 픽셀 쉐이더(PS) -> 출력 병합기 -> 스트림 출력

고정 프로그램 단계: 입력 조립, 테셀레이터, 스트림 출력, 래스터 라이저, 출력병합
프로그램 가능 단계: 정점 쉐이터, 헐 쉐이더, 도메인 쉐이더, 기하 쉐이더, 픽셀 쉐이더
고정 프로그램 단계는 내부 내용 변경 불가. 설정만 가능함
프로그램 단계는 쉐이더를 통해 설정 가능

입력 조립 (IA): 정점 데이터를 프리미티브로 조립. 시스템 생성값(시맨틱) 추가.
정점 쉐이더 (VS): 각 정점에 대한 연산을 수행. 각 정점당 한번 호출, 하나의 출력 정점을 생성.
헐 쉐이더 (HS): 모형을 더욱 동적으로 세분화
테셀레이터 (TS): 더 세분화 + 헐 쉐이더 기반으로 새 정점 만들기
도메인 쉐이더 (DS): 각 정점을 3D 공간으로 변환
기하 쉐이더 (GS): 사용자 정의 기준에 따라 프리미티브 생성/폐기
레스터 라이저 (RS): 각 픽셀에 대한 연산 수행 후 깊이값 출력. 보간으로 픽셀로 변환
픽셀 쉐이더 (PS): 각 픽셀 당 한번식 호출. 픽셀 연산 수행
출력병합 (OM): 각 픽셀에 대한 깊이 스텐실 검사와 블렌딩 연산을 수행하여 최종 출력 색상을 결정

9. 원근투영 행렬을 사용하는 이유를 설명하시오,그것은 무엇인가
- 원근투영은 기본적으로 변환이 필요한데 변환을 할 때는 행렬로 처리하는 것이 효율적이고 또한, 많은 수의 정점에 동시에 적용할 수 있으므로 비디오 게임과 같은 실시간 렌더링 응용 프로그램에 적합하기 때문이다.
- 원근투영은 z축의 좌표값을 0으로 바꾸어 2D화면에 입체감을 표현하는 방식이다. 이 때 사용하기 위해 만든 행렬

10. DirectX math에서 충돌 구조체를 설명
- 충돌 구조체에는 BoundingBox, Sphere 등이 있다. 그 구조체의 크기를 조정하고 그 구조체의 충돌 판정은
intersects함수를 호출해서 충돌 판정을 한다. 이 때 충돌 구조체의 크기는 매 프레임 마다 불리는 함수에서
부모 객체의 변환을 따라가게 한다.

13. DirectX math에서 커맨드 리스트를 사용하는 방법
- 한번에 처리하지 않고 큐에 저장해뒀다가 준비가 됐을때 사용하기 때문에 CreateCommandQueue를 호출하고
ExecuteCommandList 매서드를 사용해 추가한다

14. 다렉에서 리소스를 사용하기 위한 방법/과정
- 리소스를 만들고 -> 그 리소스의 뷰를 만들고 -> 그 뷰를 통해서 Read해서 사용한다.

15. 깊이버퍼뷰를 DirectX device에 연결하는 과정 설명
- 초반은 리소스를 사용하기 위한 방법과 같음, 깊이버퍼 리소스를 만들고 그 리소스의 뷰를 만들어서 속성을 
설정한다. 그 후에 커맨드 리스트를 사용하는 방법과 같다. 커맨드리스트의 OMSetRenderTargets 함수를
사용하여 설정한다.

16. idxgiswapchain interface 설명
- 전면버퍼와 후면버퍼의 내용을 교환하여 화면을 출력하는 함수이다. 전면버퍼를 출력하는 동안 후면버퍼를 다시 그리고 계속 교환한다.

17. gpu cpu 동기화
- 이게 커맨드 리스트를 사용하는 방법과 이어짐, cpu는 command list의 명령을 commandqueue로 넘긴다. 그리고 gpu에서 commandqueue에 담긴 명령이 준비되면 호출한다. 이 때 commandlst->commandqueue로 넘기는 과정이나 queue의 명령을 처리하는 과정에서 cpu,gpu 둘 다 계속 혹사시켜야 효율적이다.

18. gpu에서 명령실행시키는 방법
- 이게 커맨드 리스트 사용하는 방법이랑 동일 gpu가 커맨드 리스트를 사용하기 때문

19. 인스턴싱에 대해 설명하세요. - 기초 31
- 인스턴싱은 같은 오브젝트를 여러번 call하는 것은 여러번 하는 것이 비효율적이라서 하나의 오브젝트에 대한 여러개의 인스턴스를 1번만 DP call하는 것입니다

20. plane 함수 설명하세요.
- plandot - 평면과 4차원 벡터를 내적해서 평면과 벡터의 위치관계를 리턴
- planedotcoord - 평면과 3차원 벡터를 내적해서 평면과 벡터의 거리를 리턴
- planenomalize - 벡터를 단위벡터로 정규화하는 함수이기에 벡터방향은 그대로며 크기는 1이 됩니다.
- planedotnomalize - 평면의 법선벡터와 3차원 벡터의 방향벡터를 내적해서 두 벡터 사이의 각도를 구하는 함수

21. D3Ddevice command 리스트의 특징은?
- 명령을 순서대로 저장한 뒤 실행

22. 커맨드 실행과정 설명하세요.
(CPU)
1. 명령 할당자 만들기
2. 명령 리스트 만들기
3. 명령 기록하기
4. 명령 리스트 닫기
5. 명령 리스트를 명령 큐로 보내기
(GPU)
6. 명령 큐 실행

23. 디스크립터를 함수 위주로 하여 설명
- GPU 파이프라인에 바인딩된 리소스 및 리소스 뷰를 나타내는 데 사용됩니다.
- create뎁스 스텐실 뷰 : 뎁스 스텐실 버퍼로 사용 할 수 있는 뷰를 생성
- create렌더 타겟 뷰 : 렌더링 대상으로 사용할 수 있는 뷰를 생성
- create세이더 리소스 뷰 : 셰이더 리소스에 액세스하는 데 사용할 수 있는 뷰를 생성

24. 뎁스 스텐실 버퍼 다이렉트 디바이스 연결 순서
1. 뎁스 스텐실 버퍼 리소스 생성
2. 뎁스 스텐실 뷰 만들기
3. 뎁스 스텐실 상태 초기화
4. 뎁스 스텐실 뷰를 파이프라인에 연결
5. 뎁스 스텐실 버퍼 지우기
6. 뎁스 스텐실 버퍼 렌더링

25. 전체화면을 윈도우 화면을 변경하는 거 설명
- DXGI가 전면 버퍼/윈도우 크기 변경

26. IDXGISwapChain이란?
- 렌더링된 영상을 저장하기 위한 하나 이상의 버퍼를 제공

27. 루트 시그니쳐란?
- 어떤 리소스가 그래픽스 파이프라인의 쉐이더에 연결되는가를 정의
- 명령 리스트들을 쉐이더가 요구하는 리소스에 연결
- 그래픽스/계산 루트 시그니쳐

28. 사원수?
- 4차원 행렬 = 3차원 벡터(회전) + 스칼라(회전의 크기)
쿼터니언 -   실수부분과 3개의 허수부분으로 이루어진 4차원 복소수이다
		

